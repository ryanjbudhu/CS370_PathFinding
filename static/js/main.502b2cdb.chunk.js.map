{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/Dijkstra.js","algorithms/AStar.js","algorithms/PathButton.js","algorithms/MazeMakers/RandomMaze.js","algorithms/MazeMakers/NewRecursiveDivision.js","PathfindingVisualizer/PathfindingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","onMouseClick","row","extraClassName","id","className","onClick","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","sortOpenList","open","h","tentativeScore","Math","abs","includes","DijkstraButton","state","nodesInShortestPathOrder","reduce","a","b","concat","alg","f","cur","undefined","astar","currentNode","unshift","getNodesInShortestPathOrder_astar","getNodesInShortestPathOrder_dijkstra","animate","visualize","addRandomWalls","path","floor","random","getRandomPath","options","pathFirst","pathLast","randomNum","first","pickRandomNeighbor","last","l","NewRecursiveDivision","old_start_row","old_start_col","old_finish_row","old_finish_col","divide","region","seeds","randA","subregion_A","splice","randB","subregion_B","randIdx","curr","inSubA","getNeighbors","barrierList","subA","subB","barrierCells","cellA","findBarrier","randomHoleIdx","randomHole","bCell","indexOf","new_start_row","new_start_col","new_finish_row","new_finish_col","START_NODE_ROW","window","innerHeight","START_NODE_COL","innerWidth","FINISH_NODE_ROW","FINISH_NODE_COL","algorithms","PathfindingVisualizer","mouseIsPressed","sIsPressed","fIsPressed","getInitialGrid","setState","document","addEventListener","handleKeyDown","bind","handleKeyUp","removeEventListener","resetColors","visitedNodes","getElementsByClassName","i","classList","contains","getElementById","add","newGrid","RandomMaze","NewRecursiveDivsion","fX","fY","console","log","getNewGridWithWallToggled","e","keyCode","setTimeout","animateShortestPath","replace","map","key","resetGrid","generateRandomMaze","generateRecursiveDivisionMaze","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseClick","handleMouseUp","numWide","numHigh","currentRow","createNode","slice","newNode","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.502b2cdb.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      onMouseClick,\n      row,\n    } = this.props;\n    const extraClassName = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : '';\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}\n        onClick={() => onMouseClick(row, col)}></div>\n    );\n  }\n}\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    if (closestNode !== startNode) visitedNodesInOrder.push(closestNode);\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {col, row} = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder_dijkstra(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","export function astar(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  // const pairs = getHeuristics(grid, finishNode);\n  for (const row of grid) for (const node of row) node.distance = Infinity;\n  startNode.distance = 0;\n  const open = [startNode];\n  while (open) {\n    sortOpenList(open);\n    const cur = open.shift();\n    if (cur === undefined) return visitedNodesInOrder;\n    if (cur.isWall) continue;\n    if (cur === finishNode) return visitedNodesInOrder;\n    cur.isVisited = true;\n    if (cur !== startNode) visitedNodesInOrder.push(cur);\n    updateUnvisitedNeighbors(cur, grid, open, visitedNodesInOrder, finishNode);\n  }\n  return visitedNodesInOrder;\n}\n\n// eslint-disable-next-line\nfunction sortOpenList(open) {\n  open.sort(\n    (nodeA, nodeB) => nodeA.distance + nodeA.h - (nodeB.distance + nodeB.h),\n  );\n}\n\nfunction updateUnvisitedNeighbors(\n  node,\n  grid,\n  open,\n  visitedNodesInOrder,\n  finishNode,\n) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    const tentativeScore = node.distance + 1;\n    if (tentativeScore < neighbor.distance) {\n      neighbor.distance = tentativeScore;\n      neighbor.h =\n        Math.abs(neighbor.col - finishNode.col) +\n        Math.abs(neighbor.row - finishNode.row);\n      neighbor.previousNode = node;\n      if (!visitedNodesInOrder.includes(neighbor)) {\n        open.push(neighbor);\n      }\n    }\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {col, row} = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n// eslint-disable-next-line\nfunction getHeuristics(grid, finishNode) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      const heuristic =\n        Math.abs(node.col - finishNode.col) +\n        Math.abs(node.row - finishNode.row);\n      node.distance = Infinity;\n      node.h = heuristic;\n      // nodes.push({node: node, g: Infinity, h: heuristic});\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder_astar(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React, {Component} from 'react';\nimport {dijkstra, getNodesInShortestPathOrder_dijkstra} from './Dijkstra';\nimport {astar, getNodesInShortestPathOrder_astar} from './AStar';\n\nexport default class DijkstraButton extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n  // ADD ALGORITHM NAME IN SWITCH\n  visualize() {\n    const grid = this.props.grid;\n    const startNode = grid\n      .reduce((a, b) => a.concat(b))\n      .filter(node => node.isStart)[0];\n    const finishNode = grid\n      .reduce((a, b) => a.concat(b))\n      .filter(node => node.isFinish)[0];\n    let visitedNodesInOrder;\n    let nodesInShortestPathOrder;\n    switch (this.props.alg) {\n      case 'A*':\n        visitedNodesInOrder = astar(grid, startNode, finishNode);\n        nodesInShortestPathOrder = getNodesInShortestPathOrder_astar(\n          finishNode,\n        );\n        break;\n      case 'Dijkstra':\n        visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n        nodesInShortestPathOrder = getNodesInShortestPathOrder_dijkstra(\n          finishNode,\n        );\n        break;\n      default:\n        return;\n    }\n    this.props.animate(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={() => this.visualize()}>\n          Visualize {this.props.alg}'s Algorithm\n        </button>\n      </div>\n    );\n  }\n}\n","export default function RandomMaze(grid) {\n  // Find start and end node\n  const [startNode, finishNode] = grid\n    .reduce((a, b) => a.concat(b))\n    .filter(node => node.isStart || node.isFinish);\n  const path = getRandomPath(grid, startNode, finishNode);\n  const newGrid = addRandomWalls(grid, path, startNode, finishNode);\n  return newGrid;\n}\n\nconst addRandomWalls = (grid, path, startNode, finishNode) => {\n  for (const row of grid) {\n    for (const node of row) {\n      if (path.includes(node) || node === startNode || node === finishNode)\n        continue;\n      const addWall = Math.floor(Math.random() * 10);\n      if (addWall < 5) {\n        node.isWall = true;\n      }\n    }\n  }\n  return grid;\n};\n\nconst getRandomPath = (options, startNode, finishNode) => {\n  const pathFirst = [];\n  const pathLast = [];\n  let randomNum = Math.floor(\n    Math.random() * (options.reduce((a, b) => a.concat(b)).length / 2) + 10,\n  );\n  let first = pickRandomNeighbor(options, startNode);\n  let last = pickRandomNeighbor(options, finishNode);\n  pathFirst.push(first);\n  pathLast.push(last);\n  for (randomNum; randomNum >= 0; --randomNum) {\n    const f = pickRandomNeighbor(options, pathFirst[pathFirst.length - 1]);\n    const l = pickRandomNeighbor(options, pathLast[pathLast.length - 1]);\n    pathFirst.push(f);\n    pathLast.push(l);\n    options = options.filter(node => node !== f && node !== l);\n  }\n  return pathFirst.concat(pathLast);\n};\n\nconst pickRandomNeighbor = (options, node) => {\n  const neighbors = [];\n  const {col, row} = node;\n  if (row > 0) neighbors.push(options[row - 1][col]);\n  if (row < options.length - 1) neighbors.push(options[row + 1][col]);\n  if (col > 0) neighbors.push(options[row][col - 1]);\n  if (col < options[0].length - 1) neighbors.push(options[row][col + 1]);\n  const neighborNum = Math.floor(Math.random() * (neighbors.length - 1));\n  return neighbors[neighborNum];\n};\n","export default function NewRecursiveDivision(\n  grid,\n  old_start_row,\n  old_start_col,\n  old_finish_row,\n  old_finish_col,\n) {\n  grid[old_start_row][old_start_col].isStart = false;\n  grid[old_finish_row][old_finish_col].isFinish = false;\n  grid[0][0].isStart = true;\n  grid[grid.length - 1][grid[0].length - 1].isFinish = true;\n  divide(\n    grid,\n    grid.reduce((a, b) => a.concat(b)),\n  );\n  return [grid, grid.length - 1, grid[0].length - 1];\n}\n\nfunction divide(grid, region) {\n  if (region.length < 100) return;\n  let seeds = [];\n  const randA = Math.floor(Math.random() * (region.length - 1));\n  let subregion_A = [region[randA]];\n  region.splice(randA, 1);\n  seeds.push(subregion_A[0]);\n\n  const randB = Math.floor(Math.random() * (region.length - 1));\n  let subregion_B = [region[randB]];\n  seeds.push(subregion_B[0]);\n\n  while (seeds.length > 0) {\n    const randIdx = Math.floor(Math.random() * (seeds.length - 1));\n    const curr = seeds[randIdx];\n    seeds.splice(randIdx, 1);\n    const inSubA = subregion_A.includes(curr);\n    for (const neighbor of getNeighbors(grid, region, curr)) {\n      if (subregion_A.includes(neighbor) || subregion_B.includes(neighbor))\n        continue;\n      seeds.push(neighbor);\n      if (inSubA) subregion_A.push(neighbor);\n      else subregion_B.push(neighbor);\n    }\n  }\n\n  const barrierList = findBarrier(grid, subregion_A, subregion_B);\n  const randomHoleIdx = Math.floor(Math.random() * (barrierList.length - 2));\n  const randomHole = [\n    barrierList[randomHoleIdx],\n    barrierList[randomHoleIdx + 1],\n  ];\n  for (const bCell of barrierList) {\n    if (randomHole.includes(bCell)) continue;\n    grid[bCell.row][bCell.col].isWall = true;\n    subregion_A.splice(subregion_A.indexOf(bCell), 1);\n  }\n  // First sub region\n  divide(grid, subregion_A);\n\n  // Second sub region\n  divide(grid, subregion_B);\n}\n\nfunction getNeighbors(grid, region, node) {\n  const neighbors = [];\n  const {col, row} = node;\n  if (row > 0 && region.includes(grid[row - 1][col]))\n    neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1 && region.includes(grid[row + 1][col]))\n    neighbors.push(grid[row + 1][col]);\n  if (col > 0 && region.includes(grid[row][col - 1]))\n    neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1 && region.includes(grid[row][col + 1]))\n    neighbors.push(grid[row][col + 1]);\n  return neighbors;\n}\n\nfunction findBarrier(grid, subA, subB) {\n  const barrierCells = [];\n  for (const cellA of subA) {\n    const {row, col} = cellA;\n    if (row > 0 && subB.includes(grid[row - 1][col])) {\n      barrierCells.push(cellA);\n      continue;\n    }\n    if (row < grid.length - 1 && subB.includes(grid[row + 1][col])) {\n      barrierCells.push(cellA);\n      continue;\n    }\n    if (col > 0 && subB.includes(grid[row][col - 1])) {\n      barrierCells.push(cellA);\n      continue;\n    }\n    if (col < grid[0].length - 1 && subB.includes(grid[row][col + 1])) {\n      barrierCells.push(cellA);\n      continue;\n    }\n  }\n  return barrierCells;\n}\n","import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport PathButton from '../algorithms/PathButton';\nimport RandomMaze from '../algorithms/MazeMakers/RandomMaze';\nimport NewRecursiveDivsion from '../algorithms/MazeMakers/NewRecursiveDivision';\n\nimport './PathfindingVisualizer.css';\n\nconst START_NODE_ROW = Math.floor((window.innerHeight * 0.35) / 30);\nconst START_NODE_COL = Math.floor((window.innerWidth * 0.25) / 25);\nconst FINISH_NODE_ROW = Math.floor((window.innerHeight * 0.35) / 30);\nconst FINISH_NODE_COL = Math.floor((window.innerWidth * 0.75) / 25);\n\nvar new_start_row;\nvar new_start_col;\nvar new_finish_row;\nvar new_finish_col;\n\n// ADD ALGORITHM NAMES HERE\nconst algorithms = ['A*', 'Dijkstra'];\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      sIsPressed: false,\n      fIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({grid});\n    document.addEventListener('keydown', this.handleKeyDown.bind(this));\n    document.addEventListener('keyup', this.handleKeyUp.bind(this));\n  }\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyDown.bind(this));\n    document.removeEventListener('keyup', this.handleKeyUp.bind(this));\n  }\n\n  resetGrid() {\n    new_start_row = Math.floor((window.innerHeight * 0.35) / 30);\n    new_start_col = Math.floor((window.innerWidth * 0.25) / 25);\n    new_finish_row = Math.floor((window.innerHeight * 0.35) / 30);\n    new_finish_col = Math.floor((window.innerWidth * 0.75) / 25);\n    const grid = getInitialGrid();\n    this.resetColors();\n    this.setState({grid});\n  }\n\n  resetColors() {\n    const visitedNodes = document.getElementsByClassName('node');\n    for (let i = 0; i < visitedNodes.length; ++i) {\n      if (visitedNodes[i].classList.contains('node-wall')) continue;\n      // console.log(visitedNodes[i].classList);\n      visitedNodes[i].className = 'node';\n    }\n    const {grid} = this.state;\n    for (const row of grid) {\n      for (const node of row) {\n        node.isVisited = false;\n        node.distance = Infinity;\n        if (node.isStart) {\n          document\n            .getElementById(`node-${node.row}-${node.col}`)\n            .classList.add('node-start');\n        } else if (node.isFinish) {\n          document\n            .getElementById(`node-${node.row}-${node.col}`)\n            .classList.add('node-finish');\n        }\n      }\n    }\n    this.setState({grid});\n  }\n\n  generateRandomMaze() {\n    const newGrid = RandomMaze(getInitialGrid());\n    this.resetColors();\n    this.setState({grid: newGrid});\n  }\n\n  generateRecursiveDivisionMaze() {\n    new_start_row = 0;\n    new_start_col = 0;\n    const [grid, fX, fY] = NewRecursiveDivsion(\n      getInitialGrid(),\n      new_start_row || START_NODE_ROW,\n      new_start_col || START_NODE_COL,\n      new_finish_row || FINISH_NODE_ROW,\n      new_finish_col || FINISH_NODE_COL,\n    );\n    new_finish_row = fX;\n    new_finish_col = fY;\n    grid[0][0].isStart = true;\n    this.resetColors();\n    this.setState({grid});\n    console.log(this.state.grid[0][0], grid[0][0]);\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid, mouseIsPressed: true});\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  handleMouseUp() {\n    this.setState({mouseIsPressed: false});\n  }\n\n  handleMouseClick(row, col) {\n    if (this.state.sIsPressed) {\n      new_start_row = row;\n      new_start_col = col;\n      const newGrid = getInitialGrid();\n      this.setState({grid: newGrid});\n    } else if (this.state.fIsPressed) {\n      new_finish_row = row;\n      new_finish_col = col;\n      const newGrid = getInitialGrid();\n      this.setState({grid: newGrid});\n    }\n  }\n\n  handleKeyDown(e) {\n    switch (e.keyCode) {\n      case 83: // s is pressed\n        if (this.state.sIsPressed) return;\n        this.setState({sIsPressed: true});\n        break;\n      case 70: // f is pressed\n        if (this.state.fIsPressed) return;\n        this.setState({fIsPressed: true});\n        break;\n      default:\n        return;\n    }\n  }\n  handleKeyUp(e) {\n    switch (e.keyCode) {\n      case 83: // s was released\n        this.setState({sIsPressed: false});\n        break;\n      case 70: // f was released\n        this.setState({fIsPressed: false});\n        break;\n      default:\n        return;\n    }\n  }\n\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(\n            nodesInShortestPathOrder,\n            visitedNodesInOrder,\n          );\n        }, 22 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document\n          .getElementById(`node-${node.row}-${node.col}`)\n          .classList.add('node-visited');\n      }, 20 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder, visitedNodesInOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document\n          .getElementById(`node-${node.row}-${node.col}`)\n          .classList.replace('node-visited', 'node-shortest-path');\n      }, 30 * i);\n    }\n    if (nodesInShortestPathOrder.length === 1) {\n      // No path if this is reached\n      for (let i = 0; i < visitedNodesInOrder.length; i++) {\n        // setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document\n          .getElementById(`node-${node.row}-${node.col}`)\n          .classList.replace('node-visited', 'node-failed');\n        // }, 30 * i);\n      }\n    }\n  }\n\n  render() {\n    const {grid, mouseIsPressed} = this.state;\n    console.log(new_start_row, new_start_col);\n    return (\n      <>\n        {grid ? (\n          <div className=\"buttonList\">\n            {algorithms.map((alg, i) => (\n              <PathButton\n                key={i}\n                alg={alg}\n                grid={grid}\n                START_NODE_ROW={new_start_row || START_NODE_ROW}\n                START_NODE_COL={new_start_col || START_NODE_COL}\n                FINISH_NODE_ROW={new_finish_row || FINISH_NODE_ROW}\n                FINISH_NODE_COL={new_finish_col || FINISH_NODE_COL}\n                animate={this.animate}\n                animateShortestPath={this.animateShortestPath}\n              />\n            ))}\n          </div>\n        ) : (\n          <h1>Wait</h1>\n        )}\n        <br />\n        <button className=\"resetButton\" onClick={() => this.resetGrid()}>\n          Reset Walls\n        </button>\n        <button className=\"resetButton\" onClick={() => this.resetColors()}>\n          Reset Colors\n        </button>\n        <button\n          className=\"resetButton\"\n          onClick={() => this.generateRandomMaze()}>\n          Random Maze\n        </button>\n        <button\n          className=\"resetButton\"\n          onClick={() => this.generateRecursiveDivisionMaze()}>\n          Recursive Division Maze\n        </button>\n        <p className=\"showInstructions\">Instructions </p>\n        <div className=\"instructions\">\n          <p className=\"\">\n            Hold <strong>S</strong> and click to move start\n          </p>\n          <p className=\"\">\n            Hold <strong>F</strong> and click to move finish\n          </p>\n          <p className=\"\">Click and drag to create walls</p>\n        </div>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseClick={(row, col) =>\n                        this.handleMouseClick(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const numWide = Math.floor(window.innerWidth / 25);\n  const numHigh = Math.floor(window.innerHeight / 30);\n  const grid = [];\n  for (let row = 0; row < numHigh; row++) {\n    const currentRow = [];\n    for (let col = 0; col < numWide; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart:\n      row === (new_start_row || START_NODE_ROW) &&\n      col === (new_start_col || START_NODE_COL),\n    isFinish:\n      row === (new_finish_row || FINISH_NODE_ROW) &&\n      col === (new_finish_col || FINISH_NODE_COL),\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}